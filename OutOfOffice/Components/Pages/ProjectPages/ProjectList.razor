@page "/ProjectList"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using OutOfOffice.Components.Common;
@using OutOfOffice.Components.Common.CustomComponents;
@using OutOfOffice.Components.Common.Authentication;
@using OutOfOffice.Components.Repository.Interfaces


@inject IProjectRepository projectRepository
@inject IEmployeeRepository employeeRepository

@inject ExtAuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<PageTitle>Projects list</PageTitle>
<AuthorizeView Roles="PROJECT_MANAGER, ADMINISTRATOR">
    <Authorized Context="innerContext">
        <button @onclick="@(() => AddProject())">Add Project</button>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="HR_MANAGER, PROJECT_MANAGER, ADMINISTRATOR">
    <Authorized Context="innerContext">
        <div class="tab">
            <button class="@MyTabClass" @onclick="@(() => showTable("My"))">My</button>
            <button class="@EmployeesTabClass" @onclick="@(() => showTable("Manage"))">Manage</button>
        </div>
    </Authorized>
</AuthorizeView>
@if (table == "My")
{
    <CustomTableComponent TItem="ProjectData" all_rows=@myProjects>
        <RowButtons>
            <td><button @onclick="@(() => Update(context.ID))">Open</button></td>
        </RowButtons>
    </CustomTableComponent>
}
else
{
    <CustomTableComponent TItem="ProjectData" all_rows=@projects>
        <RowButtons>
            <td><button @onclick="@(() => Update(context.ID))">Open</button></td>
            <AuthorizeView Roles="PROJECT_MANAGER, ADMINISTRATOR">
                <Authorized Context="innerContext">
                    <td><button @onclick="@(() => Deactivate(context.ID))" disabled=@checkIfInactive(context.Status)>Deactivate</button></td>
                </Authorized>
            </AuthorizeView>
        </RowButtons>
    </CustomTableComponent>
}

@code {
    List<ProjectData> projects = new List<ProjectData>();
    List<ProjectData> myProjects = new List<ProjectData>();
    long my_id;
    string table = "My";
    string MyTabClass = "active";
    string EmployeesTabClass = "";

    protected override async Task OnInitializedAsync()
    {
        my_id = (long)(await AuthenticationStateProvider.GetYourID());

        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                projects = await projectRepository.GetAllProject();
                break;
            case UserAuthData.Roles.HR_MANAGER:
                projects = await projectRepository.GetAllHRManagerEmployeeProject(my_id);
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                projects = await projectRepository.GetAllProjectForProjectManager(my_id);
                break;
            case UserAuthData.Roles.EMPLOYEE:
                break;
        }

        EmployeeData my_employe_data = await employeeRepository.GetById(my_id);
        if (my_employe_data.ProjectId != null)
            myProjects = await projectRepository.GetProjectAsList((long)my_employe_data.ProjectId);


        foreach (ProjectData project in projects)
        {
            if (project.ManagerData != null)
                project.Manager_String = project.ManagerData.Full_Name;
        }
        StateHasChanged();
    }

    protected void Update(long id)
    {
        navigationManager.NavigateTo($"/ProjectUpdate/{id}");
    }

    protected async void showTable(string tableName)
    {
        table = tableName;
        if (tableName == "My")
        {
            MyTabClass = "active";
            EmployeesTabClass = "";
        }
        else
        {
            MyTabClass = "";
            EmployeesTabClass = "active";
        }

    }


    protected async Task Deactivate(long project_id)
    {
        ProjectData project = projects.Where(project => project.ID == project_id).Single();
        project.Deactivate();

        //workaournd for tracking issue
        project.ManagerData = null;
        project.EmployeesList = null;

        await projectRepository.Update(project);
        StateHasChanged();
    }

    protected void AddProject()
    {
        navigationManager.NavigateTo($"/ProjectCreator");
    }

    protected bool checkIfInactive(string status)
    {
        return status == ActiveStatus.Inactive;
    }
}