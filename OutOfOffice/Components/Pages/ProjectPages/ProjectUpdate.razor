@page "/ProjectUpdate/{ProjectId:long}"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using OutOfOffice.Components.Common;
@using OutOfOffice.Components.Common.Authentication;
@using OutOfOffice.Components.Repository.Interfaces


@inject IProjectRepository projectRepository
@inject IEmployeeRepository employeeRepository

@inject ExtAuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Update project</PageTitle>

<EditForm Model=@project OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Project_Type">Project Type</label>
        <InputSelect @bind-Value=project.Project_Type class="form-select" id="Project_Type" disabled=@disabled["Project_Type"]>
            <option value=0></option>
            @foreach (var value in ProjectType.getStringList())
            {
                <option value="@value.ToString()">@value.ToString()</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="Start_Date">Start Date</label>
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value=project.Start_Date class="form-control" id="Start_Date" disabled=@disabled["Start_Date"] />
    </div>
    <div class="form-group">
        <label for="End_Date">End Date</label>
        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value=project.End_Date class="form-control" id="End_Date" disabled=@disabled["End_Date"] />
    </div>
    <div class="form-group">
        <label for="Status">Status</label>
        <InputSelect @bind-Value=project.Status class="form-select" id="Status" disabled=@disabled["Status"]>
            @foreach (var value in ActiveStatus.getStringList())
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="Manager">Manager</label>
        <select @bind=project.Manager class="form-control" id="Manager" disabled=@disabled["Manager"]>
            <option value=0></option>
            @foreach (EmployeeData manager in managers)
            {
                <option value=@manager.ID>@manager.Full_Name</option>
            }
        </select>
    </div>
    <AuthorizeView Roles="PROJECT_MANAGER, ADMINISTRATOR">
        <Authorized Context="innerContext">
            @if (!hideButtons)
            {
                <input type="submit" class="btn btn-primary" value="Save" />
            }
        </Authorized>
    </AuthorizeView>
</EditForm>
<ResultMessage show_alert=@show_alert sucess=@sucess Sucess_message="Adding project ended with sucess" Failuer_message="Something went wrong when adding project"></ResultMessage>

@code {
    ProjectData project = new ProjectData();
    List<EmployeeData> managers = new List<EmployeeData>();
    Dictionary<string, bool> disabled = new Dictionary<string, bool>();
    bool show_alert = false;
    bool sucess = false;
    bool hideButtons = false;
    long my_id;

    [Parameter]
    public long ProjectId { get; set; }

    string LastSubmitResult;

    protected override async Task OnInitializedAsync()
    {
        await CreateDisabled();
        my_id = (long)(await AuthenticationStateProvider.GetYourID());
        project = await projectRepository.GetProject((long)ProjectId);
        managers = await employeeRepository.GetAllProjectManager();
        await UpdateDisabled();
        StateHasChanged();
    }

    async void ValidFormSubmitted(EditContext editContext)
    {
        bool result = await projectRepository.Update(project);
        show_alert = true;
        sucess = result;
        StateHasChanged();
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        show_alert = true;
        sucess = false;
        StateHasChanged();
    }

    async Task CreateDisabled()
    {

        disabled.TryAdd("Project_Type", false);
        disabled.TryAdd("Start_Date", false);
        disabled.TryAdd("End_Date", false);
        disabled.TryAdd("Status", false);
        disabled.TryAdd("Manager", false);
        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                break;
            case UserAuthData.Roles.HR_MANAGER:
                disabled["Project_Type"] = true;
                disabled["Start_Date"] = true;
                disabled["End_Date"] = true;
                disabled["Status"] = true;
                disabled["Manager"] = true;
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                break;
            case UserAuthData.Roles.EMPLOYEE:
                disabled["Project_Type"] = true;
                disabled["Start_Date"] = true;
                disabled["End_Date"] = true;
                disabled["Status"] = true;
                disabled["Manager"] = true;
                break;
        }
    }

    async Task UpdateDisabled()
    {
        if (project.EmployeesList.Any<EmployeeData>(employee => employee.ID == my_id))
        {
            disabled["Project_Type"] = true;
            disabled["Start_Date"] = true;
            disabled["End_Date"] = true;
            disabled["Status"] = true;
            disabled["Manager"] = true;
            hideButtons = true;
        }
    }
}