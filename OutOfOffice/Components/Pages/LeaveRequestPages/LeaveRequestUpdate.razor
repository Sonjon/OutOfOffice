@page "/LeaveRequestUpdate"
@page "/LeaveRequestUpdate/{LeaveRequestId:int}"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using OutOfOffice.Components.Common;
@inject ExtAuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Submit Leave Request</PageTitle>


<EditForm Model=@newLeaveRequest OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Absence_Reason">Absence Reason</label>
        <InputText @bind-Value=newLeaveRequest.Absence_Reason class="form-control" id="Absence_Reason" disabled=@disabled["Absence_Reason"] />
    </div>
    <div class="form-group">
        <label for="Start_Date">Start Date</label>
        <InputDate @bind-Value=newLeaveRequest.Start_Date class="form-control" id="Start_Date" disabled=@disabled["Start_Date"] />
    </div>
    <div class="form-group">
        <label for="End_Date">End Date</label>
        <InputDate @bind-Value=newLeaveRequest.End_Date class="form-select" id="End_Date" disabled=@disabled["End_Date"] />
        </div>
    <div class="form-group">
        <label for="Comment">Comment</label>
        <InputText @bind-Value=newLeaveRequest.Comment class="form-control" id="Comment" disabled=@disabled["Comment"] />
    </div>
    @if (!disabled["Buttons"])
    {
        <input type="submit" class="btn btn-primary" value="Save" />
        <button class="btn btn-primary" @onclick="@(() => Submit())">Submit</button>
        <button class="btn btn-primary" @onclick="@(() => Cancel())">Cancel</button>
    }
</EditForm>
<ResultMessage show_alert=@show_alert sucess=@sucess Sucess_message="Updating employee ended with sucess" Failuer_message="Something went wrong when updating employee"></ResultMessage>

@code {
    LeaveRequest newLeaveRequest = new LeaveRequest();
    LeaveRequest oldLeaveRequestData = new LeaveRequest();
    bool show_alert = false;
    bool sucess = false;
    Dictionary<string, bool> disabled = new Dictionary<string, bool>();
    int? my_id;

    [Parameter]
    public int LeaveRequestId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        oldLeaveRequestData = await Backend.GetLeaveRequestAsync(LeaveRequestId);
        if (oldLeaveRequestData != null)
            newLeaveRequest.Copy(oldLeaveRequestData);
        await CreateDisabled();
    }

    async void ValidFormSubmitted(EditContext editContext)
    {
        bool result = await Backend.Add_Leave_Request(newLeaveRequest);
        show_alert = true;
        sucess = result;
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
        show_alert = true;
        sucess = false;
    }

    protected async void Submit()
    {
        newLeaveRequest.Submitt();
        StateHasChanged();
    }

    protected async void Cancel()
    {
        newLeaveRequest.Cancel();
        StateHasChanged();
    }

    async Task CreateDisabled()
    {
        
        disabled.Add("Absence_Reason", false);
        disabled.Add("Start_Date", false);
        disabled.Add("End_Date", false);
        disabled.Add("Comment", false);
        disabled.Add("Buttons", false);

        my_id = await AuthenticationStateProvider.GetYourID();
        if (my_id != oldLeaveRequestData.EmployeeId)
        {
            disabled["Absence_Reason"] = true;
            disabled["Start_Date"] = true;
            disabled["End_Date"] = true;
            disabled["Comment"] = true;
            disabled["Buttons"]= true;
            switch (await AuthenticationStateProvider.GetRole())
            {
                case UserAuthData.Roles.ADMINISTRATOR:
                    disabled["Absence_Reason"] =false;
                    disabled["Start_Date"] = false;
                    disabled["End_Date"] = false;
                    disabled["Comment"] = false;
                    disabled["Buttons"] = false;
                    break;
                case UserAuthData.Roles.HR_MANAGER:
                    break;
                case UserAuthData.Roles.PROJECT_MANAGER:
                    break;
                case UserAuthData.Roles.EMPLOYEE:
                    break;
            }
        }
    }
}