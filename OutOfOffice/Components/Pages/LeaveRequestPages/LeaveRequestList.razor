@page "/LeaveRequestList"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using OutOfOffice.Components.Common;
@using OutOfOffice.Components.Repository.Interfaces;
@using OutOfOffice.Components.Common.Authentication;
@using OutOfOffice.Components.Common.CustomComponents;

@inject ExtAuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ILeaveRequestRepository leaveRequestRepository
@inject IApprovalRequestRepository approvalRequestRepository

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<PageTitle>LeaveRequest List</PageTitle>
<button @onclick="@(() => AddLeaveRequest())">Add LeaveRequest</button>

<AuthorizeView Roles="HR_MANAGER, PROJECT_MANAGER, ADMINISTRATOR">
    <Authorized Context="innerContext">
        <div class="tab">
            <button class="@MyTabClass" @onclick="@(() => showTable("My"))">My</button>
            <button class="@EmployeesTabClass" @onclick="@(() => showTable("Employees"))">Employees</button>
        </div>
    </Authorized>
</AuthorizeView>
@if (table == "My")
{
    <CustomTableComponent TItem="LeaveRequestData" all_rows=@myLeaveRequests>
        <RowButtons>
            <td><button @onclick="@(() => Update(context.ID))">Open</button></td>
            @if (my_id == context.EmployeeId)
            {
                <td><button @onclick="@(() => Submit(context.ID))" disabled=@checkIfNew(context.Status)>Submit</button></td>
                <td><button @onclick="@(() => Cancel(context.ID))" disabled=@checkIfNew(context.Status)>Cancel</button></td>
            }
        </RowButtons>
    </CustomTableComponent>
}
else
{
    <CustomTableComponent TItem="LeaveRequestData" all_rows=@leaveRequests>
        <RowButtons>
            <td><button @onclick="@(() => Update(context.ID))">Open</button></td>
        </RowButtons>
    </CustomTableComponent>
}

@code {
    List<LeaveRequestData> leaveRequests = new List<LeaveRequestData>();
    List<LeaveRequestData> myLeaveRequests = new List<LeaveRequestData>();
    long? my_id;
    string table = "My";
    string MyTabClass = "active";
    string EmployeesTabClass = "";


    protected override async Task OnInitializedAsync()
    {
        my_id = await AuthenticationStateProvider.GetYourID();
        myLeaveRequests = await leaveRequestRepository.GetAllLeaveRequestByEmployee((long)my_id);
        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                leaveRequests = await leaveRequestRepository.GetAllLeaveRequests();
                break;
            case UserAuthData.Roles.HR_MANAGER:
                leaveRequests = await leaveRequestRepository.GetAllLeaveRequestHRManager((long)my_id);
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                leaveRequests = await leaveRequestRepository.GetAllLeaveRequestProjectManager((long)my_id);
                break;
            case UserAuthData.Roles.EMPLOYEE:
                break;
        }
    }

    protected bool checkIfNew(string status)
    {
        return status != LeaveRequestStatus.New;
    }

    protected void Update(long id)
    {
        navigationManager.NavigateTo($"/LeaveRequestUpdate/{id}");
    }

    protected async void showTable(string tableName)
    {
        table = tableName;
        if (tableName == "My")
        {
            MyTabClass = "active";
            EmployeesTabClass = "";
        }
        else
        {
            MyTabClass = "";
            EmployeesTabClass = "active";
        }

    }

    protected async Task Submit(long leaveRequest_id)
    {
        LeaveRequestData leaveRequest;
        if(table == "My")
            leaveRequest = myLeaveRequests.Where(leaveRequest => leaveRequest.ID == leaveRequest_id).Single();
        else
            leaveRequest= leaveRequests.Where(leaveRequest => leaveRequest.ID == leaveRequest_id).Single();
        leaveRequest.Submitt();

        await leaveRequestRepository.Update(leaveRequest);
        StateHasChanged();
    }

    protected async Task Cancel(long leaveRequest_id)
    {
        LeaveRequestData leaveRequest = leaveRequests.Where(leaveRequest => leaveRequest.ID == leaveRequest_id).Single();
        leaveRequest.Cancel();

        await leaveRequestRepository.Update(leaveRequest);
        StateHasChanged();
    }

    protected void AddLeaveRequest()
    {
        navigationManager.NavigateTo($"/LeaveRequestCreator");
    }


}