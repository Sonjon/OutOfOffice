@page "/LeaveRequestList"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using OutOfOffice.Components.Common;

@inject ExtAuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<PageTitle>LeaveRequest List</PageTitle>
<button @onclick="@(() => AddLeaveRequest())">Add LeaveRequest</button>

<AuthorizeView Roles="HR_MANAGER, PROJECT_MANAGER, ADMINISTRATOR">
    <Authorized Context="innerContext">
        <div class="tab">
            <button class="@MyTabClass" @onclick="@(() => showTable("My"))">My</button>
            <button class="@EmployeesTabClass" @onclick="@(() => showTable("Employees"))">Employees</button>
        </div>
    </Authorized>
</AuthorizeView>
@if (table == "My")
{
    <CustomTableComponent TItem="LeaveRequest" all_rows=@myLeaveRequests>
        <RowButtons>
            <td><button @onclick="@(() => Update(context.ID))">Open</button></td>
            @if (my_id == context.EmployeeId)
            {
                <td><button @onclick="@(() => Submit(context.ID))" disabled=@checkIfNew(context.Status)>Submit</button></td>
                <td><button @onclick="@(() => Cancel(context.ID))" disabled=@checkIfNew(context.Status)>Cancel</button></td>
            }
        </RowButtons>
    </CustomTableComponent>
}
else
{
    <CustomTableComponent TItem="LeaveRequest" all_rows=@leaveRequests>
        <RowButtons>
            <td><button @onclick="@(() => Update(context.ID))">Open</button></td>
        </RowButtons>
    </CustomTableComponent>
}

@code {
    List<LeaveRequest> leaveRequests = new List<LeaveRequest>();
    List<LeaveRequest> myLeaveRequests = new List<LeaveRequest>();
    int? my_id;
    string table = "My";
    string MyTabClass = "active";
    string EmployeesTabClass = "";


    protected override async Task OnInitializedAsync()
    {
        my_id = await AuthenticationStateProvider.GetYourID();
        myLeaveRequests = await Backend.GetMyLeaveRequestsAsync((int)my_id);
        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                leaveRequests = await Backend.GetLeaveRequestsAsync();
                break;
            case UserAuthData.Roles.HR_MANAGER:
                leaveRequests = await Backend.GetLeaveRequestsAsyncWithHRManager((int)my_id);
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                leaveRequests = await Backend.GetLeaveRequestsAsyncWithProjectManager((int)my_id);
                break;
            case UserAuthData.Roles.EMPLOYEE:
                break;
        }
    }

    protected bool checkIfNew(LeaveRequestStatus status)
    {
        return status != LeaveRequestStatus.New;
    }

    protected void Update(int id)
    {
        navigationManager.NavigateTo($"/LeaveRequestUpdate/{id}");
    }

    protected async void showTable(string tableName)
    {
        table = tableName;
        if (tableName == "My")
        {
            MyTabClass = "active";
            EmployeesTabClass = "";
        }
        else
        {
            MyTabClass = "";
            EmployeesTabClass = "active";
        }

    }

    protected async void Submit(int leaveRequest_id)
    {
        IEnumerable<LeaveRequest> query = leaveRequests.Where(leaveRequest => leaveRequest.ID == leaveRequest_id);
        foreach (LeaveRequest leaveRequest in query)
        {
            leaveRequest.Submitt();
            if (my_id != null)
                leaveRequests = await Backend.GetMyLeaveRequestsAsync((int)my_id);
            StateHasChanged();
        }
    }

    protected async void Cancel(int leaveRequest_id)
    {
        IEnumerable<LeaveRequest> query = leaveRequests.Where(leaveRequest => leaveRequest.ID == leaveRequest_id);
        foreach (LeaveRequest leaveRequest in query)
        {
            leaveRequest.Cancel();
            leaveRequests = await Backend.GetLeaveRequestsAsync();
            StateHasChanged();
        }
    }

    protected void AddLeaveRequest()
    {
        navigationManager.NavigateTo($"/LeaveRequestCreator");
    }


}