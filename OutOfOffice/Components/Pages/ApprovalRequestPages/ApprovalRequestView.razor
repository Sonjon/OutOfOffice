@page "/ApprovalRequestView/{ApprovalId:long}"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using Common;
@using OutOfOffice.Components.Repository
@using OutOfOffice.Components.Common.Authentication;
@using OutOfOffice.Components.Common.CustomComponents;
@using OutOfOffice.Components.Repository.Interfaces

@inject IApprovalRequestRepository approvalRequestRepository
@inject ExtAuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Approval Requeste</PageTitle>

<EditForm Model=@leaveRequest>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label for="Absence_Reason">Absence Reason</label>
        <InputText @bind-Value=leaveRequest.Absence_Reason class="form-control" id="Absence_Reason" disabled=@disabled["Absence Reason"] />
    </div>
    <div class="form-group">
        <label for="Start_Date">Start Date</label>
        <InputDate @bind-Value=leaveRequest.Start_Date class="form-control" id="Start_Date" disabled=@disabled["Start Date"] />
    </div>
    <div class="form-group">
        <label for="End_Date">End Date</label>
        <InputDate @bind-Value=leaveRequest.End_Date class="form-select" id="End_Date" disabled=@disabled["End Date"] />
    </div>
    <div class="form-group">
        <label for="Comment">Comment</label>
        <InputText @bind-Value=leaveRequest.Comment class="form-control" id="Comment" disabled=@disabled["Comment"] />
    </div>
</EditForm>
<EditForm Model=@approvalRequest>
    <div class="form-group">
        <label for="Comment_approval">Comment approval</label>
        <InputText @bind-Value=approvalRequest.Comment class="form-control" id="Comment_approval" disabled=@disabled["Comment_approval"] />
        @if (!hideButtons)
        {
            <button class="btn btn-primary" @onclick="@(() => Approve())" disabled=@disabled["Buttons"]>Approve</button>
            <button class="btn btn-primary" @onclick="@(() => Reject())" disabled=@disabled["Buttons"]>Reject</button>
        }
    </div>
</EditForm>
<ResultMessage show_alert=@show_alert sucess=@sucess Sucess_message="Updating employee ended with sucess" Failuer_message="Something went wrong when updating employee"></ResultMessage>

@code {
    LeaveRequestData leaveRequest = new LeaveRequestData();
    ApprovalRequestData approvalRequest = new ApprovalRequestData();
    bool show_alert = false;
    bool hideButtons = false;
    bool sucess = false;
    long my_id;

    Dictionary<string, bool> disabled = new Dictionary<string, bool>();

    [Parameter]
    public long ApprovalId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CreateDisabled();
        my_id = (long)(await AuthenticationStateProvider.GetYourID());
        approvalRequest = await approvalRequestRepository.GetAllApprovalRequestsById(ApprovalId);
        leaveRequest = approvalRequest.LeaveRequest;
        UpdateDisabled();
    }

    protected async void Approve()
    {
        await approvalRequest.Approve(my_id);
        disabled["Comment_approval"] = true;
        disabled["Buttons"] = true;
        await approvalRequestRepository.Update(approvalRequest);
        StateHasChanged();
    }

    protected async void Reject()
    {
        await approvalRequest.Reject(my_id);
        disabled["Comment_approval"] = true;
        disabled["Buttons"] = true;
        await approvalRequestRepository.Update(approvalRequest);
        StateHasChanged();
    }

    async Task CreateDisabled()
    {

        disabled.TryAdd("Absence Reason", true);
        disabled.TryAdd("Start Date", true);
        disabled.TryAdd("End Date", true);
        disabled.TryAdd("Comment", true);
        disabled.TryAdd("Comment_approval", false);
        disabled.TryAdd("Buttons", false);
        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                break;
            case UserAuthData.Roles.HR_MANAGER:
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                break;
            case UserAuthData.Roles.EMPLOYEE:
                disabled["Comment_approval"] = true;
                hideButtons = true;
                disabled["Buttons"] = true;
                break;
        }
    }

    async Task UpdateDisabled()
    {
        if (approvalRequest.Status == LeaveRequestStatus.Submitted)
        {
            disabled["Buttons"] = false;
            disabled["Comment_approval"] = false;
        }
        else
        {
            disabled["Buttons"] = true;
            disabled["Comment_approval"] = true;
        }
        if (leaveRequest.EmployeeId == my_id)
        {
            hideButtons = true;
            disabled["Comment_approval"] = true;
        }
    }

}