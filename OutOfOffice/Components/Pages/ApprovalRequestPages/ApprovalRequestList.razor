@page "/ApprovalRequestList"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using OutOfOffice.Components.Common;
@using OutOfOffice.Components.Common.Authentication;
@using OutOfOffice.Components.Common.CustomComponents;
@using OutOfOffice.Components.Repository.Interfaces

@inject IApprovalRequestRepository approvalRequestRepository
@inject ExtAuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<PageTitle>Approval Request List</PageTitle>

<AuthorizeView Roles="HR_MANAGER, PROJECT_MANAGER, ADMINISTRATOR">
    <Authorized Context="innerContext">
        <div class="tab">
            <button class="@MyTabClass" @onclick="@(() => showTable("My"))">My</button>
            <button class="@EmployeesTabClass" @onclick="@(() => showTable("Employees"))">Employees</button>
        </div>
    </Authorized>
</AuthorizeView>
@if (table == "My")
{
    <CustomTableComponent TItem="ApprovalRequestData" all_rows=@myApprovalsRequest>
    <RowButtons>
        <td><button @onclick="@(() => Open(context.ID))">Open</button></td>
    </RowButtons>
    </CustomTableComponent>
}
else
{
    <CustomTableComponent TItem="ApprovalRequestData" all_rows=@approvalsRequest>
        <RowButtons>
            <td><button @onclick="@(() => Open(context.ID))">Open</button></td>
        </RowButtons>
    </CustomTableComponent>
}

@code {
    List<ApprovalRequestData> approvalsRequest = new List<ApprovalRequestData>();
    List<ApprovalRequestData> myApprovalsRequest = new List<ApprovalRequestData>();
    string table = "My";
    string MyTabClass = "active";
    string EmployeesTabClass = "";

    protected override async Task OnInitializedAsync()
    {
        long my_id = (long)(await AuthenticationStateProvider.GetYourID());
        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                approvalsRequest = await approvalRequestRepository.GetAllAsync();
                break;
            case UserAuthData.Roles.HR_MANAGER:
                approvalsRequest = await approvalRequestRepository.GetAllApprovalRequestHRManager((long)my_id);
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                approvalsRequest = await approvalRequestRepository.GetAllApprovalRequestProjectManager((long)my_id);
                break;
            case UserAuthData.Roles.EMPLOYEE:
                break;
        }
        myApprovalsRequest = await approvalRequestRepository.GetAllApprovalRequestByEmployee((long)my_id);
    }

    protected void Open(long id)
    {
        navigationManager.NavigateTo($"/ApprovalRequestView/{id}");
    }

    protected async void showTable(string tableName)
    {
        table = tableName;
        if (tableName == "My")
        {
            MyTabClass = "active";
            EmployeesTabClass = "";
        }
        else
        {
            MyTabClass = "";
            EmployeesTabClass = "active";
        }

    }

}