@page "/EmployeeUpdate"
@page "/EmployeeUpdate/{EmploiyeeId:long}"
@using System.ComponentModel.DataAnnotations;
@using Data;
@using Backend;
@using Common;
@using OutOfOffice.Components.Repository.Interfaces;
@using OutOfOffice.Components.Common.Authentication;

@inject ExtAuthenticationStateProvider AuthenticationStateProvider
@inject IEmployeeRepository employeeRepository
@inject IProjectRepository projectRepository

<PageTitle>Update employee</PageTitle>
<AuthorizeView Roles="HR_MANAGER, PROJECT_MANAGER, ADMINISTRATOR">
    <Authorized Context="innerContext">
        <EditForm Model=@newPerson OnValidSubmit=@ValidFormSubmitted OnInvalidSubmit=@InvalidFormSubmitted>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Name">Name</label>
                <InputText @bind-Value=newPerson.Full_Name class="form-control" id="Full Name" disabled=@disabled["Full Name"] />
            </div>
            <div class="form-group">
                <label for="Subdivision">Subdivision</label>
                <InputSelect @bind-Value=newPerson.Subdivision class="form-select" id="Subdivision" disabled=@disabled["Subdivision"]>
                    @foreach (var value in Subdivision.getStringList())
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Position">Position</label>
                <InputSelect @bind-Value="@newPerson.Position" class="form-control" id="Position" disabled=@disabled["Position"]>
                    @foreach (var value in Positions.getStringList())
                    {
                        <option value=@value.ToString().Replace("_", " ")>@value.ToString().Replace("_", " ")</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Status">Status</label>
                <InputSelect @bind-Value="@newPerson.Status" class="form-control" id="Status" disabled=@disabled["Status"]>
                    @foreach (var value in ActiveStatus.getStringList())
                    {
                        <option value="@value">@value</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Manager">Manager</label>
                <select @bind=newPerson.Manager class="form-control" id="Manager" disabled=@disabled["Manager"]>
                    <option value=0></option>
                    @foreach (EmployeeData manager in managers)
                    {
                        <option value=@manager.ID>@manager.Full_Name</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="Vacation">Vacation</label>
                <InputNumber @bind-Value=newPerson.Vacation class="form-control" id="Vacation" disabled=@disabled["Vacation"] />
            </div>
            <AuthorizeView Roles="PROJECT_MANAGER, ADMINISTRATOR">
                <Authorized Context="innerContext2">
                    <div class="form-group">
                        <label for="Project">Project</label>
                        <InputSelect @bind-Value=newPerson.ProjectId class="form-control" id="Project">
                            <option value=0></option>
                            @foreach (ProjectData project in projects)
                            {
                                <option value="@project.ID">@project.Project_Type.ToString().Replace("_", " ")</option>
                            }
                        </InputSelect>
                    </div>
                </Authorized>
            </AuthorizeView>

            <input type="submit" class="btn btn-primary" value="Save" />
        </EditForm>
        <ResultMessage show_alert=@show_alert sucess=@sucess Sucess_message="Updating employee ended with sucess" Failuer_message="Something went wrong when updating employee"></ResultMessage>
    </Authorized>
    <NotAuthorized>
        You are not authorized to see this page.
    </NotAuthorized>
</AuthorizeView>

@code {
    EmployeeData newPerson = new EmployeeData();
    ProjectData newProject = new ProjectData();
    List<ProjectData> projects = new List<ProjectData>();
    List<EmployeeData> managers = new List<EmployeeData>();
    bool show_alert = false;
    bool sucess = false;

    Dictionary<string, bool> disabled = new Dictionary<string, bool>();

    [Parameter]
    public long EmploiyeeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CreateDisabled();
        long? my_id = await AuthenticationStateProvider.GetYourID();

        newPerson = await employeeRepository.GetEmployee(EmploiyeeId);
        projects = await projectRepository.GetAllProjectForProjectManager((long)my_id);
        managers = await employeeRepository.GetAllHRManager();
    }

    async void ValidFormSubmitted(EditContext editContext)
    {
        try
        {

            //workaournd for tracking issue
            newPerson.ManagerData = null;
            newPerson.ProjectInformation = null;
            sucess = await employeeRepository.Update(newPerson);
        }
        catch(Exception e)
        {
            sucess = false;
        }
        show_alert = true;
        StateHasChanged();
    }

    void InvalidFormSubmitted(EditContext editContext)
    {
    }

    async Task CreateDisabled()
    {

        disabled.Add("Full Name", false);
        disabled.Add("Subdivision", false);
        disabled.Add("Position", false);
        disabled.Add("Status", false);
        disabled.Add("Manager", false);
        disabled.Add("Vacation", false);
        switch (await AuthenticationStateProvider.GetRole())
        {
            case UserAuthData.Roles.ADMINISTRATOR:
                break;
            case UserAuthData.Roles.HR_MANAGER:
                break;
            case UserAuthData.Roles.PROJECT_MANAGER:
                disabled["Full Name"] = true;
                disabled["Subdivision"] = true;
                disabled["Position"] = true;
                disabled["Status"] = true;
                disabled["Manager"] = true;
                disabled["Vacation"] = true;
                break;
            case UserAuthData.Roles.EMPLOYEE:
                disabled["Full Name"] = true;
                disabled["Subdivision"] = true;
                disabled["Position"] = true;
                disabled["Status"] = true;
                disabled["Manager"] = true;
                disabled["Vacation"] = true;
                break;
        }
    }

}